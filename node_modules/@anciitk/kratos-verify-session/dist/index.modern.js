import React, { useState, useEffect } from 'react';
import Result from 'antd/lib/result';
import Button from 'antd/lib/button';

var styles = {"test":"_3ybTi","container":"_1Lxpd","loader":"_3qqrl","load6":"_ilNVD","round":"_1fhvQ"};

function loader() {
  return React.createElement("div", {
    className: styles.container
  }, React.createElement("div", {
    className: styles.logo
  }, React.createElement("img", {
    src: "/anc-logo.png",
    width: 150,
    height: 150
  })), React.createElement("div", {
    className: styles.loader
  }, "Loading..."));
}

var VerifyPage = function VerifyPage(_ref) {
  var _err$response2, _err$response3;

  var ory = _ref.ory,
      loginUrl = _ref.loginUrl,
      basePath = _ref.basePath,
      path = _ref.path,
      historyPush = _ref.historyPush,
      sessionState = _ref.sessionState,
      setSessionState = _ref.setSessionState,
      xenon = _ref.xenon,
      roles = _ref.roles;

  var _useState = useState(),
      err = _useState[0],
      setErr = _useState[1];

  var _useState2 = useState(false),
      denied = _useState2[0],
      setDenied = _useState2[1];

  useEffect(function () {
    ory.toSession().then(function (_ref2) {
      var session = _ref2.data;
      ory.createSelfServiceLogoutFlowUrlForBrowsers().then(function (_ref3) {
        var logout = _ref3.data;
        xenon.whoami().then(function (user) {
          setSessionState({
            active: true,
            logoutUrl: logout.logout_url || '',
            user: user,
            session: session
          });
        })["catch"](function (err) {
          throw new Error(err);
        });
      })["catch"](function (err) {
        return Promise.reject(err);
      });
    })["catch"](function (err) {
      var _err$response;

      switch ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) {
        case 403:
          window.location.href = "" + loginUrl;

        case 401:
          window.location.href = loginUrl + "?return_to=" + basePath + "/" + path;
          return;
      }

      setErr(err);
      return Promise.reject(err);
    });
  }, []);
  useEffect(function () {
    if (sessionState && sessionState.active) {
      if (sessionState.user.role in roles) historyPush("/" + path);else setDenied(true);
    }
  }, [sessionState]);
  return React.createElement("div", null, err && !denied ? React.createElement(Result, {
    status: ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status) || 500,
    title: err.message + '!' || 'Sorry, something went wrong.',
    subTitle: ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.statusText) || 'Please try again later',
    extra: [React.createElement("a", {
      href: loginUrl,
      key: '1'
    }, React.createElement(Button, {
      type: 'primary'
    }, "Go to Login"))]
  }) : React.createElement(loader, null), denied && React.createElement(Result, {
    status: '403',
    title: 'Sorry, you are not authorzied to view this page',
    subTitle: 'Please ask the administrator to grant you necessary rights',
    extra: [React.createElement("a", {
      href: loginUrl,
      key: '1'
    }, React.createElement(Button, {
      type: 'primary'
    }, "Go to Dashboard"))]
  }));
};

export default VerifyPage;
//# sourceMappingURL=index.modern.js.map
