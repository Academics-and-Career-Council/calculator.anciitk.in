/**
 * Ory Kratos API
 * Documentation for all public and administrative Ory Kratos APIs. Public and administrative APIs are exposed on different ports. Public APIs can face the public internet without any protection while administrative APIs should never be exposed without prior authorization. To protect the administative API port you should use something like Nginx, Ory Oathkeeper, or any other technology capable of authorizing incoming requests.
 *
 * The version of the OpenAPI document: v0.7.6-alpha.6
 * Contact: hi@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AdminCreateIdentityBody
 */
export interface AdminCreateIdentityBody {
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity\'s traits.
     * @type {string}
     * @memberof AdminCreateIdentityBody
     */
    schema_id: string;
    /**
     * Traits represent an identity\'s traits. The identity is able to create, modify, and delete traits in a self-service manner. The input will always be validated against the JSON Schema defined in `schema_url`.
     * @type {object}
     * @memberof AdminCreateIdentityBody
     */
    traits: object;
}
/**
 *
 * @export
 * @interface AdminCreateSelfServiceRecoveryLinkBody
 */
export interface AdminCreateSelfServiceRecoveryLinkBody {
    /**
     * Link Expires In  The recovery link will expire at that point in time. Defaults to the configuration value of `selfservice.flows.recovery.request_lifespan`.
     * @type {string}
     * @memberof AdminCreateSelfServiceRecoveryLinkBody
     */
    expires_in?: string;
    /**
     *
     * @type {string}
     * @memberof AdminCreateSelfServiceRecoveryLinkBody
     */
    identity_id: string;
}
/**
 *
 * @export
 * @interface AdminUpdateIdentityBody
 */
export interface AdminUpdateIdentityBody {
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity\'s traits. If set will update the Identity\'s SchemaID.
     * @type {string}
     * @memberof AdminUpdateIdentityBody
     */
    schema_id?: string;
    /**
     *
     * @type {IdentityState}
     * @memberof AdminUpdateIdentityBody
     */
    state: IdentityState;
    /**
     * Traits represent an identity\'s traits. The identity is able to create, modify, and delete traits in a self-service manner. The input will always be validated against the JSON Schema defined in `schema_id`.
     * @type {object}
     * @memberof AdminUpdateIdentityBody
     */
    traits: object;
}
/**
 *
 * @export
 * @interface GenericError
 */
export interface GenericError {
    /**
     * The status code
     * @type {number}
     * @memberof GenericError
     */
    code?: number;
    /**
     * Debug information  This field is often not exposed to protect against leaking sensitive information.
     * @type {string}
     * @memberof GenericError
     */
    debug?: string;
    /**
     * Further error details
     * @type {object}
     * @memberof GenericError
     */
    details?: object;
    /**
     * Error message  The error\'s message.
     * @type {string}
     * @memberof GenericError
     */
    message: string;
    /**
     * A human-readable reason for the error
     * @type {string}
     * @memberof GenericError
     */
    reason?: string;
    /**
     * The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.
     * @type {string}
     * @memberof GenericError
     */
    request?: string;
    /**
     * The status description
     * @type {string}
     * @memberof GenericError
     */
    status?: string;
}
/**
 *
 * @export
 * @interface HealthNotReadyStatus
 */
export interface HealthNotReadyStatus {
    /**
     * Errors contains a list of errors that caused the not ready status.
     * @type {{ [key: string]: string; }}
     * @memberof HealthNotReadyStatus
     */
    errors?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface HealthStatus
 */
export interface HealthStatus {
    /**
     * Status always contains \"ok\".
     * @type {string}
     * @memberof HealthStatus
     */
    status?: string;
}
/**
 * An identity can be a real human, a service, an IoT device - everything that can be described as an \"actor\" in a system.
 * @export
 * @interface Identity
 */
export interface Identity {
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof Identity
     */
    created_at?: string;
    /**
     * Credentials represents all credentials that can be used for authenticating this identity.
     * @type {{ [key: string]: IdentityCredentials; }}
     * @memberof Identity
     */
    credentials?: {
        [key: string]: IdentityCredentials;
    };
    /**
     *
     * @type {string}
     * @memberof Identity
     */
    id: string;
    /**
     * RecoveryAddresses contains all the addresses that can be used to recover an identity.
     * @type {Array<RecoveryAddress>}
     * @memberof Identity
     */
    recovery_addresses?: Array<RecoveryAddress>;
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity\'s traits.
     * @type {string}
     * @memberof Identity
     */
    schema_id: string;
    /**
     * SchemaURL is the URL of the endpoint where the identity\'s traits schema can be fetched from.  format: url
     * @type {string}
     * @memberof Identity
     */
    schema_url: string;
    /**
     *
     * @type {IdentityState}
     * @memberof Identity
     */
    state?: IdentityState;
    /**
     *
     * @type {string}
     * @memberof Identity
     */
    state_changed_at?: string;
    /**
     * Traits represent an identity\'s traits. The identity is able to create, modify, and delete traits in a self-service manner. The input will always be validated against the JSON Schema defined in `schema_url`.
     * @type {any}
     * @memberof Identity
     */
    traits: any | null;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof Identity
     */
    updated_at?: string;
    /**
     * VerifiableAddresses contains all the addresses that can be verified by the user.
     * @type {Array<VerifiableIdentityAddress>}
     * @memberof Identity
     */
    verifiable_addresses?: Array<VerifiableIdentityAddress>;
}
/**
 * Credentials represents a specific credential type
 * @export
 * @interface IdentityCredentials
 */
export interface IdentityCredentials {
    /**
     *
     * @type {object}
     * @memberof IdentityCredentials
     */
    config?: object;
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof IdentityCredentials
     */
    created_at?: string;
    /**
     * Identifiers represents a list of unique identifiers this credential type matches.
     * @type {Array<string>}
     * @memberof IdentityCredentials
     */
    identifiers?: Array<string>;
    /**
     * and so on.
     * @type {string}
     * @memberof IdentityCredentials
     */
    type?: string;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof IdentityCredentials
     */
    updated_at?: string;
}
/**
 * The state can either be `active` or `inactive`.
 * @export
 * @enum {string}
 */
export declare enum IdentityState {
    Active = "active",
    Inactive = "inactive"
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * Always \"ok\".
     * @type {string}
     * @memberof InlineResponse200
     */
    status: string;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * The version of Ory Kratos.
     * @type {string}
     * @memberof InlineResponse2001
     */
    version: string;
}
/**
 *
 * @export
 * @interface InlineResponse503
 */
export interface InlineResponse503 {
    /**
     * Errors contains a list of errors that caused the not ready status.
     * @type {{ [key: string]: string; }}
     * @memberof InlineResponse503
     */
    errors: {
        [key: string]: string;
    };
}
/**
 * The standard Ory JSON API error format.
 * @export
 * @interface JsonError
 */
export interface JsonError {
    /**
     *
     * @type {GenericError}
     * @memberof JsonError
     */
    error: GenericError;
}
/**
 * This might include a label and other information that can optionally be used to render UIs.
 * @export
 * @interface Meta
 */
export interface Meta {
    /**
     *
     * @type {UiText}
     * @memberof Meta
     */
    label?: UiText;
}
/**
 *
 * @export
 * @interface RecoveryAddress
 */
export interface RecoveryAddress {
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof RecoveryAddress
     */
    created_at?: string;
    /**
     *
     * @type {string}
     * @memberof RecoveryAddress
     */
    id: string;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof RecoveryAddress
     */
    updated_at?: string;
    /**
     *
     * @type {string}
     * @memberof RecoveryAddress
     */
    value: string;
    /**
     *
     * @type {string}
     * @memberof RecoveryAddress
     */
    via: string;
}
/**
 *
 * @export
 * @interface SelfServiceError
 */
export interface SelfServiceError {
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof SelfServiceError
     */
    created_at?: string;
    /**
     *
     * @type {object}
     * @memberof SelfServiceError
     */
    error?: object;
    /**
     *
     * @type {string}
     * @memberof SelfServiceError
     */
    id: string;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof SelfServiceError
     */
    updated_at?: string;
}
/**
 * This object represents a login flow. A login flow is initiated at the \"Initiate Login API / Browser Flow\" endpoint by a client.  Once a login flow is completed successfully, a session cookie or session token will be issued.
 * @export
 * @interface SelfServiceLoginFlow
 */
export interface SelfServiceLoginFlow {
    /**
     * and so on.
     * @type {string}
     * @memberof SelfServiceLoginFlow
     */
    active?: string;
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof SelfServiceLoginFlow
     */
    created_at?: string;
    /**
     * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in, a new flow has to be initiated.
     * @type {string}
     * @memberof SelfServiceLoginFlow
     */
    expires_at: string;
    /**
     * Forced stores whether this login flow should enforce re-authentication.
     * @type {boolean}
     * @memberof SelfServiceLoginFlow
     */
    forced?: boolean;
    /**
     *
     * @type {string}
     * @memberof SelfServiceLoginFlow
     */
    id: string;
    /**
     * IssuedAt is the time (UTC) when the flow started.
     * @type {string}
     * @memberof SelfServiceLoginFlow
     */
    issued_at: string;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof SelfServiceLoginFlow
     */
    request_url: string;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof SelfServiceLoginFlow
     */
    type: string;
    /**
     *
     * @type {UiContainer}
     * @memberof SelfServiceLoginFlow
     */
    ui: UiContainer;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof SelfServiceLoginFlow
     */
    updated_at?: string;
}
/**
 *
 * @export
 * @interface SelfServiceLogoutUrl
 */
export interface SelfServiceLogoutUrl {
    /**
     * LogoutURL can be opened in a browser to  format: uri
     * @type {string}
     * @memberof SelfServiceLogoutUrl
     */
    logout_url: string;
}
/**
 * This request is used when an identity wants to recover their account.  We recommend reading the [Account Recovery Documentation](../self-service/flows/password-reset-account-recovery)
 * @export
 * @interface SelfServiceRecoveryFlow
 */
export interface SelfServiceRecoveryFlow {
    /**
     * Active, if set, contains the registration method that is being used. It is initially not set.
     * @type {string}
     * @memberof SelfServiceRecoveryFlow
     */
    active?: string;
    /**
     * ExpiresAt is the time (UTC) when the request expires. If the user still wishes to update the setting, a new request has to be initiated.
     * @type {string}
     * @memberof SelfServiceRecoveryFlow
     */
    expires_at: string;
    /**
     *
     * @type {string}
     * @memberof SelfServiceRecoveryFlow
     */
    id: string;
    /**
     * IssuedAt is the time (UTC) when the request occurred.
     * @type {string}
     * @memberof SelfServiceRecoveryFlow
     */
    issued_at: string;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof SelfServiceRecoveryFlow
     */
    request_url: string;
    /**
     *
     * @type {SelfServiceRecoveryFlowState}
     * @memberof SelfServiceRecoveryFlow
     */
    state: SelfServiceRecoveryFlowState;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof SelfServiceRecoveryFlow
     */
    type?: string;
    /**
     *
     * @type {UiContainer}
     * @memberof SelfServiceRecoveryFlow
     */
    ui: UiContainer;
}
/**
 * The state represents the state of the recovery flow.  choose_method: ask the user to choose a method (e.g. recover account via email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the recovery challenge was passed.
 * @export
 * @enum {string}
 */
export declare enum SelfServiceRecoveryFlowState {
    ChooseMethod = "choose_method",
    SentEmail = "sent_email",
    PassedChallenge = "passed_challenge"
}
/**
 *
 * @export
 * @interface SelfServiceRecoveryLink
 */
export interface SelfServiceRecoveryLink {
    /**
     * Recovery Link Expires At  The timestamp when the recovery link expires.
     * @type {string}
     * @memberof SelfServiceRecoveryLink
     */
    expires_at?: string;
    /**
     * Recovery Link  This link can be used to recover the account.
     * @type {string}
     * @memberof SelfServiceRecoveryLink
     */
    recovery_link: string;
}
/**
 *
 * @export
 * @interface SelfServiceRegistrationFlow
 */
export interface SelfServiceRegistrationFlow {
    /**
     * and so on.
     * @type {string}
     * @memberof SelfServiceRegistrationFlow
     */
    active?: string;
    /**
     * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in, a new flow has to be initiated.
     * @type {string}
     * @memberof SelfServiceRegistrationFlow
     */
    expires_at: string;
    /**
     *
     * @type {string}
     * @memberof SelfServiceRegistrationFlow
     */
    id: string;
    /**
     * IssuedAt is the time (UTC) when the flow occurred.
     * @type {string}
     * @memberof SelfServiceRegistrationFlow
     */
    issued_at: string;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof SelfServiceRegistrationFlow
     */
    request_url: string;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof SelfServiceRegistrationFlow
     */
    type?: string;
    /**
     *
     * @type {UiContainer}
     * @memberof SelfServiceRegistrationFlow
     */
    ui: UiContainer;
}
/**
 * This flow is used when an identity wants to update settings (e.g. profile data, passwords, ...) in a selfservice manner.  We recommend reading the [User Settings Documentation](../self-service/flows/user-settings)
 * @export
 * @interface SelfServiceSettingsFlow
 */
export interface SelfServiceSettingsFlow {
    /**
     * Active, if set, contains the registration method that is being used. It is initially not set.
     * @type {string}
     * @memberof SelfServiceSettingsFlow
     */
    active?: string;
    /**
     * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to update the setting, a new flow has to be initiated.
     * @type {string}
     * @memberof SelfServiceSettingsFlow
     */
    expires_at: string;
    /**
     *
     * @type {string}
     * @memberof SelfServiceSettingsFlow
     */
    id: string;
    /**
     *
     * @type {Identity}
     * @memberof SelfServiceSettingsFlow
     */
    identity: Identity;
    /**
     * IssuedAt is the time (UTC) when the flow occurred.
     * @type {string}
     * @memberof SelfServiceSettingsFlow
     */
    issued_at: string;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof SelfServiceSettingsFlow
     */
    request_url: string;
    /**
     *
     * @type {SelfServiceSettingsFlowState}
     * @memberof SelfServiceSettingsFlow
     */
    state: SelfServiceSettingsFlowState;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof SelfServiceSettingsFlow
     */
    type?: string;
    /**
     *
     * @type {UiContainer}
     * @memberof SelfServiceSettingsFlow
     */
    ui: UiContainer;
}
/**
 * show_form: No user data has been collected, or it is invalid, and thus the form should be shown. success: Indicates that the settings flow has been updated successfully with the provided data. Done will stay true when repeatedly checking. If set to true, done will revert back to false only when a flow with invalid (e.g. \"please use a valid phone number\") data was sent.
 * @export
 * @enum {string}
 */
export declare enum SelfServiceSettingsFlowState {
    ShowForm = "show_form",
    Success = "success"
}
/**
 * Used to verify an out-of-band communication channel such as an email address or a phone number.  For more information head over to: https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation
 * @export
 * @interface SelfServiceVerificationFlow
 */
export interface SelfServiceVerificationFlow {
    /**
     * Active, if set, contains the registration method that is being used. It is initially not set.
     * @type {string}
     * @memberof SelfServiceVerificationFlow
     */
    active?: string;
    /**
     * ExpiresAt is the time (UTC) when the request expires. If the user still wishes to verify the address, a new request has to be initiated.
     * @type {string}
     * @memberof SelfServiceVerificationFlow
     */
    expires_at?: string;
    /**
     *
     * @type {string}
     * @memberof SelfServiceVerificationFlow
     */
    id: string;
    /**
     * IssuedAt is the time (UTC) when the request occurred.
     * @type {string}
     * @memberof SelfServiceVerificationFlow
     */
    issued_at?: string;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof SelfServiceVerificationFlow
     */
    request_url?: string;
    /**
     *
     * @type {SelfServiceVerificationFlowState}
     * @memberof SelfServiceVerificationFlow
     */
    state: SelfServiceVerificationFlowState;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof SelfServiceVerificationFlow
     */
    type: string;
    /**
     *
     * @type {UiContainer}
     * @memberof SelfServiceVerificationFlow
     */
    ui: UiContainer;
}
/**
 * The state represents the state of the verification flow.  choose_method: ask the user to choose a method (e.g. recover account via email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the recovery challenge was passed.
 * @export
 * @enum {string}
 */
export declare enum SelfServiceVerificationFlowState {
    ChooseMethod = "choose_method",
    SentEmail = "sent_email",
    PassedChallenge = "passed_challenge"
}
/**
 * A Session
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * Whether or not the session is active.
     * @type {boolean}
     * @memberof Session
     */
    active?: boolean;
    /**
     * The Session Authentication Timestamp  When this session was authenticated at.
     * @type {string}
     * @memberof Session
     */
    authenticated_at?: string;
    /**
     * The Session Expiry  When this session expires at.
     * @type {string}
     * @memberof Session
     */
    expires_at?: string;
    /**
     *
     * @type {string}
     * @memberof Session
     */
    id: string;
    /**
     *
     * @type {Identity}
     * @memberof Session
     */
    identity: Identity;
    /**
     * The Session Issuance Timestamp  When this session was authenticated at.
     * @type {string}
     * @memberof Session
     */
    issued_at?: string;
}
/**
 *
 * @export
 * @interface SettingsProfileFormConfig
 */
export interface SettingsProfileFormConfig {
    /**
     * Action should be used as the form action URL `<form action=\"{{ .Action }}\" method=\"post\">`.
     * @type {string}
     * @memberof SettingsProfileFormConfig
     */
    action: string;
    /**
     *
     * @type {Array<UiText>}
     * @memberof SettingsProfileFormConfig
     */
    messages?: Array<UiText>;
    /**
     * Method is the form method (e.g. POST)
     * @type {string}
     * @memberof SettingsProfileFormConfig
     */
    method: string;
    /**
     *
     * @type {Array<UiNode>}
     * @memberof SettingsProfileFormConfig
     */
    nodes: Array<UiNode>;
}
/**
 * @type SubmitSelfServiceLoginFlowBody
 * @export
 */
export declare type SubmitSelfServiceLoginFlowBody = SubmitSelfServiceLoginFlowWithOidcMethodBody | SubmitSelfServiceLoginFlowWithPasswordMethodBody;
/**
 * SubmitSelfServiceLoginFlowWithOidcMethodBody is used to decode the login form payload when using the oidc method.
 * @export
 * @interface SubmitSelfServiceLoginFlowWithOidcMethodBody
 */
export interface SubmitSelfServiceLoginFlowWithOidcMethodBody {
    /**
     * The CSRF Token
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithOidcMethodBody
     */
    csrf_token?: string;
    /**
     * Method to use  This field must be set to `oidc` when using the oidc method.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithOidcMethodBody
     */
    method: string;
    /**
     * The provider to register with
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithOidcMethodBody
     */
    traits: string;
}
/**
 *
 * @export
 * @interface SubmitSelfServiceLoginFlowWithPasswordMethodBody
 */
export interface SubmitSelfServiceLoginFlowWithPasswordMethodBody {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithPasswordMethodBody
     */
    csrf_token?: string;
    /**
     * Method should be set to \"password\" when logging in using the identifier and password strategy.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithPasswordMethodBody
     */
    method: string;
    /**
     * The user\'s password.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithPasswordMethodBody
     */
    password: string;
    /**
     * Identifier is the email or username of the user trying to log in.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithPasswordMethodBody
     */
    password_identifier: string;
}
/**
 * nolint:deadcode,unused
 * @export
 * @interface SubmitSelfServiceLogoutFlowWithoutBrowserBody
 */
export interface SubmitSelfServiceLogoutFlowWithoutBrowserBody {
    /**
     * The Session Token  Invalidate this session token.
     * @type {string}
     * @memberof SubmitSelfServiceLogoutFlowWithoutBrowserBody
     */
    session_token: string;
}
/**
 * @type SubmitSelfServiceRecoveryFlowBody
 * @export
 */
export declare type SubmitSelfServiceRecoveryFlowBody = SubmitSelfServiceRecoveryFlowWithLinkMethodBody;
/**
 *
 * @export
 * @interface SubmitSelfServiceRecoveryFlowWithLinkMethodBody
 */
export interface SubmitSelfServiceRecoveryFlowWithLinkMethodBody {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof SubmitSelfServiceRecoveryFlowWithLinkMethodBody
     */
    csrf_token?: string;
    /**
     * Email to Recover  Needs to be set when initiating the flow. If the email is a registered recovery email, a recovery link will be sent. If the email is not known, a email with details on what happened will be sent instead.  format: email
     * @type {string}
     * @memberof SubmitSelfServiceRecoveryFlowWithLinkMethodBody
     */
    email: string;
    /**
     * Method supports `link` only right now.
     * @type {string}
     * @memberof SubmitSelfServiceRecoveryFlowWithLinkMethodBody
     */
    method: string;
}
/**
 * @type SubmitSelfServiceRegistrationFlowBody
 * @export
 */
export declare type SubmitSelfServiceRegistrationFlowBody = SubmitSelfServiceRegistrationFlowWithOidcMethodBody | SubmitSelfServiceRegistrationFlowWithPasswordMethodBody;
/**
 * SubmitSelfServiceRegistrationFlowWithOidcMethodBody is used to decode the registration form payload when using the oidc method.
 * @export
 * @interface SubmitSelfServiceRegistrationFlowWithOidcMethodBody
 */
export interface SubmitSelfServiceRegistrationFlowWithOidcMethodBody {
    /**
     * The CSRF Token
     * @type {string}
     * @memberof SubmitSelfServiceRegistrationFlowWithOidcMethodBody
     */
    csrf_token?: string;
    /**
     * Method to use  This field must be set to `oidc` when using the oidc method.
     * @type {string}
     * @memberof SubmitSelfServiceRegistrationFlowWithOidcMethodBody
     */
    method: string;
    /**
     * The provider to register with
     * @type {string}
     * @memberof SubmitSelfServiceRegistrationFlowWithOidcMethodBody
     */
    traits: string;
}
/**
 * SubmitSelfServiceRegistrationFlowWithPasswordMethodBody is used to decode the registration form payload when using the password method.
 * @export
 * @interface SubmitSelfServiceRegistrationFlowWithPasswordMethodBody
 */
export interface SubmitSelfServiceRegistrationFlowWithPasswordMethodBody {
    /**
     * The CSRF Token
     * @type {string}
     * @memberof SubmitSelfServiceRegistrationFlowWithPasswordMethodBody
     */
    csrf_token?: string;
    /**
     * Method to use  This field must be set to `password` when using the password method.
     * @type {string}
     * @memberof SubmitSelfServiceRegistrationFlowWithPasswordMethodBody
     */
    method: string;
    /**
     * Password to sign the user up with
     * @type {string}
     * @memberof SubmitSelfServiceRegistrationFlowWithPasswordMethodBody
     */
    password: string;
    /**
     * The identity\'s traits
     * @type {object}
     * @memberof SubmitSelfServiceRegistrationFlowWithPasswordMethodBody
     */
    traits: object;
}
/**
 * @type SubmitSelfServiceSettingsFlowBody
 * @export
 */
export declare type SubmitSelfServiceSettingsFlowBody = SubmitSelfServiceSettingsFlowWithOidcMethodBody | SubmitSelfServiceSettingsFlowWithPasswordMethodBody | SubmitSelfServiceSettingsFlowWithProfileMethodBody;
/**
 * nolint:deadcode,unused
 * @export
 * @interface SubmitSelfServiceSettingsFlowWithOidcMethodBody
 */
export interface SubmitSelfServiceSettingsFlowWithOidcMethodBody {
    /**
     * Flow ID is the flow\'s ID.  in: query
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithOidcMethodBody
     */
    flow?: string;
    /**
     * Link this provider  Either this or `unlink` must be set.  type: string in: body
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithOidcMethodBody
     */
    link?: string;
    /**
     * Method  Should be set to profile when trying to update a profile.
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithOidcMethodBody
     */
    method: string;
    /**
     * Unlink this provider  Either this or `link` must be set.  type: string in: body
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithOidcMethodBody
     */
    unlink?: string;
}
/**
 *
 * @export
 * @interface SubmitSelfServiceSettingsFlowWithPasswordMethodBody
 */
export interface SubmitSelfServiceSettingsFlowWithPasswordMethodBody {
    /**
     * CSRFToken is the anti-CSRF token
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithPasswordMethodBody
     */
    csrf_token?: string;
    /**
     * Method  Should be set to password when trying to update a password.
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithPasswordMethodBody
     */
    method: string;
    /**
     * Password is the updated password
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithPasswordMethodBody
     */
    password: string;
}
/**
 * nolint:deadcode,unused
 * @export
 * @interface SubmitSelfServiceSettingsFlowWithProfileMethodBody
 */
export interface SubmitSelfServiceSettingsFlowWithProfileMethodBody {
    /**
     * The Anti-CSRF Token  This token is only required when performing browser flows.
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithProfileMethodBody
     */
    csrf_token?: string;
    /**
     * Method  Should be set to profile when trying to update a profile.
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithProfileMethodBody
     */
    method: string;
    /**
     * Traits contains all of the identity\'s traits.
     * @type {object}
     * @memberof SubmitSelfServiceSettingsFlowWithProfileMethodBody
     */
    traits: object;
}
/**
 * @type SubmitSelfServiceVerificationFlowBody
 * nolint:deadcode,unused
 * @export
 */
export declare type SubmitSelfServiceVerificationFlowBody = SubmitSelfServiceVerificationFlowWithLinkMethodBody;
/**
 *
 * @export
 * @interface SubmitSelfServiceVerificationFlowWithLinkMethodBody
 */
export interface SubmitSelfServiceVerificationFlowWithLinkMethodBody {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof SubmitSelfServiceVerificationFlowWithLinkMethodBody
     */
    csrf_token?: string;
    /**
     * Email to Verify  Needs to be set when initiating the flow. If the email is a registered verification email, a verification link will be sent. If the email is not known, a email with details on what happened will be sent instead.  format: email
     * @type {string}
     * @memberof SubmitSelfServiceVerificationFlowWithLinkMethodBody
     */
    email: string;
    /**
     * Method supports `link` only right now.
     * @type {string}
     * @memberof SubmitSelfServiceVerificationFlowWithLinkMethodBody
     */
    method: string;
}
/**
 * The Response for Login Flows via API
 * @export
 * @interface SuccessfulSelfServiceLoginWithoutBrowser
 */
export interface SuccessfulSelfServiceLoginWithoutBrowser {
    /**
     *
     * @type {Session}
     * @memberof SuccessfulSelfServiceLoginWithoutBrowser
     */
    session: Session;
    /**
     * The Session Token  A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization Header:  Authorization: bearer ${session-token}  The session token is only issued for API flows, not for Browser flows!
     * @type {string}
     * @memberof SuccessfulSelfServiceLoginWithoutBrowser
     */
    session_token?: string;
}
/**
 * The Response for Registration Flows via API
 * @export
 * @interface SuccessfulSelfServiceRegistrationWithoutBrowser
 */
export interface SuccessfulSelfServiceRegistrationWithoutBrowser {
    /**
     *
     * @type {Identity}
     * @memberof SuccessfulSelfServiceRegistrationWithoutBrowser
     */
    identity: Identity;
    /**
     *
     * @type {Session}
     * @memberof SuccessfulSelfServiceRegistrationWithoutBrowser
     */
    session?: Session;
    /**
     * The Session Token  This field is only set when the session hook is configured as a post-registration hook.  A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization Header:  Authorization: bearer ${session-token}  The session token is only issued for API flows, not for Browser flows!
     * @type {string}
     * @memberof SuccessfulSelfServiceRegistrationWithoutBrowser
     */
    session_token?: string;
}
/**
 * The Response for Settings Flows via API
 * @export
 * @interface SuccessfulSelfServiceSettingsWithoutBrowser
 */
export interface SuccessfulSelfServiceSettingsWithoutBrowser {
    /**
     *
     * @type {SelfServiceSettingsFlow}
     * @memberof SuccessfulSelfServiceSettingsWithoutBrowser
     */
    flow: SelfServiceSettingsFlow;
    /**
     *
     * @type {Identity}
     * @memberof SuccessfulSelfServiceSettingsWithoutBrowser
     */
    identity: Identity;
}
/**
 * Container represents a HTML Form. The container can work with both HTTP Form and JSON requests
 * @export
 * @interface UiContainer
 */
export interface UiContainer {
    /**
     * Action should be used as the form action URL `<form action=\"{{ .Action }}\" method=\"post\">`.
     * @type {string}
     * @memberof UiContainer
     */
    action: string;
    /**
     *
     * @type {Array<UiText>}
     * @memberof UiContainer
     */
    messages?: Array<UiText>;
    /**
     * Method is the form method (e.g. POST)
     * @type {string}
     * @memberof UiContainer
     */
    method: string;
    /**
     *
     * @type {Array<UiNode>}
     * @memberof UiContainer
     */
    nodes: Array<UiNode>;
}
/**
 * Nodes are represented as HTML elements or their native UI equivalents. For example, a node can be an `<img>` tag, or an `<input element>` but also `some plain text`.
 * @export
 * @interface UiNode
 */
export interface UiNode {
    /**
     *
     * @type {UiNodeAttributes}
     * @memberof UiNode
     */
    attributes: UiNodeAttributes;
    /**
     *
     * @type {string}
     * @memberof UiNode
     */
    group: string;
    /**
     *
     * @type {Array<UiText>}
     * @memberof UiNode
     */
    messages: Array<UiText>;
    /**
     *
     * @type {Meta}
     * @memberof UiNode
     */
    meta: Meta;
    /**
     *
     * @type {string}
     * @memberof UiNode
     */
    type: string;
}
/**
 *
 * @export
 * @interface UiNodeAnchorAttributes
 */
export interface UiNodeAnchorAttributes {
    /**
     * The link\'s href (destination) URL.  format: uri
     * @type {string}
     * @memberof UiNodeAnchorAttributes
     */
    href: string;
    /**
     *
     * @type {UiText}
     * @memberof UiNodeAnchorAttributes
     */
    title: UiText;
}
/**
 * @type UiNodeAttributes
 * @export
 */
export declare type UiNodeAttributes = UiNodeAnchorAttributes | UiNodeImageAttributes | UiNodeInputAttributes | UiNodeTextAttributes;
/**
 *
 * @export
 * @interface UiNodeImageAttributes
 */
export interface UiNodeImageAttributes {
    /**
     * The image\'s source URL.  format: uri
     * @type {string}
     * @memberof UiNodeImageAttributes
     */
    src: string;
}
/**
 * InputAttributes represents the attributes of an input node
 * @export
 * @interface UiNodeInputAttributes
 */
export interface UiNodeInputAttributes {
    /**
     * Sets the input\'s disabled field to true or false.
     * @type {boolean}
     * @memberof UiNodeInputAttributes
     */
    disabled: boolean;
    /**
     *
     * @type {UiText}
     * @memberof UiNodeInputAttributes
     */
    label?: UiText;
    /**
     * The input\'s element name.
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    name: string;
    /**
     * The input\'s pattern.
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    pattern?: string;
    /**
     * Mark this input field as required.
     * @type {boolean}
     * @memberof UiNodeInputAttributes
     */
    required?: boolean;
    /**
     *
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    type: string;
    /**
     * The input\'s value.
     * @type {any}
     * @memberof UiNodeInputAttributes
     */
    value?: any | null;
}
/**
 *
 * @export
 * @interface UiNodeTextAttributes
 */
export interface UiNodeTextAttributes {
    /**
     *
     * @type {UiText}
     * @memberof UiNodeTextAttributes
     */
    text: UiText;
}
/**
 *
 * @export
 * @interface UiText
 */
export interface UiText {
    /**
     * The message\'s context. Useful when customizing messages.
     * @type {object}
     * @memberof UiText
     */
    context?: object;
    /**
     *
     * @type {number}
     * @memberof UiText
     */
    id: number;
    /**
     * The message text. Written in american english.
     * @type {string}
     * @memberof UiText
     */
    text: string;
    /**
     *
     * @type {string}
     * @memberof UiText
     */
    type: string;
}
/**
 * VerifiableAddress is an identity\'s verifiable address
 * @export
 * @interface VerifiableIdentityAddress
 */
export interface VerifiableIdentityAddress {
    /**
     * When this entry was created
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    created_at?: string;
    /**
     *
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    id: string;
    /**
     * VerifiableAddressStatus must not exceed 16 characters as that is the limitation in the SQL Schema
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    status: string;
    /**
     * When this entry was last updated
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    updated_at?: string;
    /**
     * The address value  example foo@user.com
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    value: string;
    /**
     * Indicates if the address has already been verified
     * @type {boolean}
     * @memberof VerifiableIdentityAddress
     */
    verified: boolean;
    /**
     *
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    verified_at?: string;
    /**
     * VerifiableAddressType must not exceed 16 characters as that is the limitation in the SQL Schema
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    via: string;
}
/**
 *
 * @export
 * @interface Version
 */
export interface Version {
    /**
     * Version is the service\'s version.
     * @type {string}
     * @memberof Version
     */
    version?: string;
}
/**
 * MetadataApi - axios parameter creator
 * @export
 */
export declare const MetadataApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint returns the version of Ory Kratos.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @summary Return Running Software Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersion: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isAlive: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Kratos, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server and Database Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isReady: (options?: any) => Promise<RequestArgs>;
    /**
     * ``` metadata: annotations: prometheus.io/port: \"4434\" prometheus.io/path: \"/metrics/prometheus\" ```
     * @summary Get snapshot metrics from the service. If you\'re using k8s, you can then add annotations to your deployment like so:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    prometheus: (options?: any) => Promise<RequestArgs>;
};
/**
 * MetadataApi - functional programming interface
 * @export
 */
export declare const MetadataApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint returns the version of Ory Kratos.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @summary Return Running Software Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersion(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isAlive(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Kratos, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server and Database Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isReady(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>>;
    /**
     * ``` metadata: annotations: prometheus.io/port: \"4434\" prometheus.io/path: \"/metrics/prometheus\" ```
     * @summary Get snapshot metrics from the service. If you\'re using k8s, you can then add annotations to your deployment like so:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    prometheus(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * MetadataApi - factory interface
 * @export
 */
export declare const MetadataApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint returns the version of Ory Kratos.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @summary Return Running Software Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersion(options?: any): AxiosPromise<InlineResponse2001>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isAlive(options?: any): AxiosPromise<InlineResponse200>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Kratos, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server and Database Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isReady(options?: any): AxiosPromise<InlineResponse200>;
    /**
     * ``` metadata: annotations: prometheus.io/port: \"4434\" prometheus.io/path: \"/metrics/prometheus\" ```
     * @summary Get snapshot metrics from the service. If you\'re using k8s, you can then add annotations to your deployment like so:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    prometheus(options?: any): AxiosPromise<void>;
};
/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
export declare class MetadataApi extends BaseAPI {
    /**
     * This endpoint returns the version of Ory Kratos.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @summary Return Running Software Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    getVersion(options?: any): Promise<import("axios").AxiosResponse<InlineResponse2001>>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    isAlive(options?: any): Promise<import("axios").AxiosResponse<InlineResponse200>>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Kratos, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server and Database Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    isReady(options?: any): Promise<import("axios").AxiosResponse<InlineResponse200>>;
    /**
     * ``` metadata: annotations: prometheus.io/port: \"4434\" prometheus.io/path: \"/metrics/prometheus\" ```
     * @summary Get snapshot metrics from the service. If you\'re using k8s, you can then add annotations to your deployment like so:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    prometheus(options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * V0alpha1Api - axios parameter creator
 * @export
 */
export declare const V0alpha1ApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint creates an identity. It is NOT possible to set an identity\'s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Create an Identity
     * @param {AdminCreateIdentityBody} [adminCreateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateIdentity: (adminCreateIdentityBody?: AdminCreateIdentityBody, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {AdminCreateSelfServiceRecoveryLinkBody} [adminCreateSelfServiceRecoveryLinkBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateSelfServiceRecoveryLink: (adminCreateSelfServiceRecoveryLinkBody?: AdminCreateSelfServiceRecoveryLinkBody, options?: any) => Promise<RequestArgs>;
    /**
     * Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Delete an Identity
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteIdentity: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Get an Identity
     * @param {string} id ID must be set to the ID of identity you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetIdentity: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all identities. Does not support search at the moment.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary List Identities
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListIdentities: (perPage?: number, page?: number, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint updates an identity. It is NOT possible to set an identity\'s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  The full identity payload (except credentials) is expected. This endpoint does not support patching.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Update an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {AdminUpdateIdentityBody} [adminUpdateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateIdentity: (id: string, adminUpdateIdentityBody?: AdminUpdateIdentityBody, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.  When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
     * @summary Create a Logout URL for Browsers
     * @param {string} [cookie] HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSelfServiceLogoutFlowUrlForBrowsers: (cookie?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a JSON Schema
     * @param {string} id ID must be set to the ID of schema you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJsonSchema: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?id=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get Self-Service Errors
     * @param {string} id Error is the error\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceError: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/login\', async function (req, res) { const flow = await client.getSelfServiceLoginFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'login\', flow) }) ```  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Login Flow
     * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceLoginFlow: (id: string, cookie?: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceRecoveryFlow(req.header(\'Cookie\'), req.query[\'flow\'])  res.render(\'recovery\', flow) }) ```  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Get Recovery Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRecoveryFlow: (id: string, cookie?: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/registration\', async function (req, res) { const flow = await client.getSelfServiceRegistrationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'registration\', flow) }) ```  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Registration Flow
     * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRegistrationFlow: (id: string, cookie?: string, options?: any) => Promise<RequestArgs>;
    /**
     * When accessing this endpoint through Ory Kratos\' Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using Ory Kratos\' Admin API.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {string} [xSessionToken] The Session Token  When using the SDK in an app without a browser, please include the session token here.
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here. You only need to do this for browser- based flows.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceSettingsFlow: (id: string, xSessionToken?: string, cookie?: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceVerificationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'verification\', flow) })  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceVerificationFlow: (id: string, cookie?: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  If this endpoint is called via an AJAX request, the response contains the login flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Login Flow for Browsers
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginFlowForBrowsers: (refresh?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a login flow for API clients that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Login Flow for APIs, Services, Apps, ...
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginFlowWithoutBrowser: (refresh?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists, the browser is returned to the configured return URL.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects or a 400 bad request error if the user is already authenticated.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Initialize Recovery Flow for Browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryFlowForBrowsers: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).   More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Initialize Recovery Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryFlowWithoutBrowser: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url`.  If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Registration Flow for Browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationFlowForBrowsers: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Registration Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationFlowWithoutBrowser: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid user session was set, the browser will be redirected to the login endpoint.  If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 403 forbidden error if no valid session was set.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for Browsers
     * @param {string} [cookie] The Session Cookie of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsFlowForBrowsers: (cookie?: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for APIs, Services, Apps, ...
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsFlowWithoutBrowser: (xSessionToken?: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for Browser Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationFlowForBrowsers: (options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationFlowWithoutBrowser: (options?: any) => Promise<RequestArgs>;
    /**
     * :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 302 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded; a HTTP 302 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Submit a Login Flow
     * @param {string} flow The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceLoginFlowBody} [submitSelfServiceLoginFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLoginFlow: (flow: string, submitSelfServiceLoginFlowBody?: SubmitSelfServiceLoginFlowBody, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint logs out an identity in a self-service manner.  If the `Accept` HTTP header is not set to `application/json`, the browser will be redirected (HTTP 302 Found) to the `return_to` parameter of the initial request or fall back to `urls.default_return_to`.  If the `Accept` HTTP header is set to `application/json`, a 204 No Content response will be sent on successful logout instead.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
     * @summary Complete Self-Service Logout
     * @param {string} [token] A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call &#x60;/self-service/logout/urls&#x60; to generate a URL for this endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLogoutFlow: (token?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when the Ory Session Token has been revoked already before.  If the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
     * @summary Perform Logout for APIs, Services, Apps, ...
     * @param {SubmitSelfServiceLogoutFlowWithoutBrowserBody} submitSelfServiceLogoutFlowWithoutBrowserBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLogoutFlowWithoutBrowser: (submitSelfServiceLogoutFlowWithoutBrowserBody: SubmitSelfServiceLogoutFlowWithoutBrowserBody, options?: any) => Promise<RequestArgs>;
    /**
     * Use this endpoint to complete a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid. and a HTTP 302 Found redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 302 Found redirect to the Recovery UI URL with the Recovery Flow ID appended. `sent_email` is the success state after `choose_method` for the `link` method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\") does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Complete Recovery Flow
     * @param {string} flow The Recovery Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {string} [token] Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {SubmitSelfServiceRecoveryFlowBody} [submitSelfServiceRecoveryFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceRecoveryFlow: (flow: string, token?: string, submitSelfServiceRecoveryFlowBody?: SubmitSelfServiceRecoveryFlowBody, options?: any) => Promise<RequestArgs>;
    /**
     * Use this endpoint to complete a registration flow by sending an identity\'s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the `session` and `session_token` will also be included; HTTP 302 redirect to a fresh registration flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 302 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded; a HTTP 302 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Submit a Registration Flow
     * @param {string} flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceRegistrationFlowBody} [submitSelfServiceRegistrationFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceRegistrationFlow: (flow: string, submitSelfServiceRegistrationFlowBody?: SubmitSelfServiceRegistrationFlowBody, options?: any) => Promise<RequestArgs>;
    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached. Implies that the user needs to re-authenticate.  Browser flows without HTTP Header `Accept` or with `Accept: text/_*` respond with a HTTP 302 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 302 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 302 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached.  Browser flows with HTTP Header `Accept: application/json` respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 403 when the page is accessed without a session cookie. HTTP 400 on form validation errors.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow
     * @param {string} flow The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {SubmitSelfServiceSettingsFlowBody} [submitSelfServiceSettingsFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceSettingsFlow: (flow: string, xSessionToken?: string, submitSelfServiceSettingsFlowBody?: SubmitSelfServiceSettingsFlowBody, options?: any) => Promise<RequestArgs>;
    /**
     * Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 302 Found redirect to the Verification UI URL with the Verification Flow ID appended. `sent_email` is the success state after `choose_method` when using the `link` method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\") does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Complete Verification Flow
     * @param {string} flow The Verification Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {string} [token] Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {SubmitSelfServiceVerificationFlowBody} [submitSelfServiceVerificationFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceVerificationFlow: (flow: string, token?: string, submitSelfServiceVerificationFlowBody?: SubmitSelfServiceVerificationFlowBody, options?: any) => Promise<RequestArgs>;
    /**
     * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. Additionally when the request it successful it adds the user ID to the \'X-Kratos-Authenticated-Identity-Id\' header in the response.  If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:  ```js pseudo-code example router.get(\'/protected-endpoint\', async function (req, res) { const session = await client.toSession(undefined, req.header(\'cookie\'))  console.log(session) }) ```  When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:  ```js pseudo-code example ... const session = await client.toSession(\"the-session-token\")  console.log(session) ```  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the `X-Session-Token` header!  This endpoint authenticates users by checking  if the `Cookie` HTTP header was set containing an Ory Kratos Session Cookie; if the `Authorization: bearer <ory-session-token>` HTTP header was set with a valid Ory Kratos Session Token; if the `X-Session-Token` HTTP header was set with a valid Ory Kratos Session Token.  If none of these headers are set or the cooke or token are invalid, the endpoint returns a HTTP 401 status code.
     * @summary Check Who the Current HTTP Session Belongs To
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    toSession: (xSessionToken?: string, cookie?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * V0alpha1Api - functional programming interface
 * @export
 */
export declare const V0alpha1ApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint creates an identity. It is NOT possible to set an identity\'s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Create an Identity
     * @param {AdminCreateIdentityBody} [adminCreateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateIdentity(adminCreateIdentityBody?: AdminCreateIdentityBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Identity>>;
    /**
     * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {AdminCreateSelfServiceRecoveryLinkBody} [adminCreateSelfServiceRecoveryLinkBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateSelfServiceRecoveryLink(adminCreateSelfServiceRecoveryLinkBody?: AdminCreateSelfServiceRecoveryLinkBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceRecoveryLink>>;
    /**
     * Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Delete an Identity
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteIdentity(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Get an Identity
     * @param {string} id ID must be set to the ID of identity you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetIdentity(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Identity>>;
    /**
     * Lists all identities. Does not support search at the moment.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary List Identities
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListIdentities(perPage?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Identity>>>;
    /**
     * This endpoint updates an identity. It is NOT possible to set an identity\'s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  The full identity payload (except credentials) is expected. This endpoint does not support patching.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Update an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {AdminUpdateIdentityBody} [adminUpdateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateIdentity(id: string, adminUpdateIdentityBody?: AdminUpdateIdentityBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Identity>>;
    /**
     * This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.  When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
     * @summary Create a Logout URL for Browsers
     * @param {string} [cookie] HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSelfServiceLogoutFlowUrlForBrowsers(cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceLogoutUrl>>;
    /**
     * Get a JSON Schema
     * @param {string} id ID must be set to the ID of schema you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJsonSchema(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?id=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get Self-Service Errors
     * @param {string} id Error is the error\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceError(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceError>>;
    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/login\', async function (req, res) { const flow = await client.getSelfServiceLoginFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'login\', flow) }) ```  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Login Flow
     * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceLoginFlow(id: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceLoginFlow>>;
    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceRecoveryFlow(req.header(\'Cookie\'), req.query[\'flow\'])  res.render(\'recovery\', flow) }) ```  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Get Recovery Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRecoveryFlow(id: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceRecoveryFlow>>;
    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/registration\', async function (req, res) { const flow = await client.getSelfServiceRegistrationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'registration\', flow) }) ```  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Registration Flow
     * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRegistrationFlow(id: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceRegistrationFlow>>;
    /**
     * When accessing this endpoint through Ory Kratos\' Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using Ory Kratos\' Admin API.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {string} [xSessionToken] The Session Token  When using the SDK in an app without a browser, please include the session token here.
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here. You only need to do this for browser- based flows.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceSettingsFlow(id: string, xSessionToken?: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceSettingsFlow>>;
    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceVerificationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'verification\', flow) })  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceVerificationFlow(id: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceVerificationFlow>>;
    /**
     * This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  If this endpoint is called via an AJAX request, the response contains the login flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Login Flow for Browsers
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginFlowForBrowsers(refresh?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceLoginFlow>>;
    /**
     * This endpoint initiates a login flow for API clients that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Login Flow for APIs, Services, Apps, ...
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginFlowWithoutBrowser(refresh?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceLoginFlow>>;
    /**
     * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists, the browser is returned to the configured return URL.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects or a 400 bad request error if the user is already authenticated.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Initialize Recovery Flow for Browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryFlowForBrowsers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceRecoveryFlow>>;
    /**
     * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).   More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Initialize Recovery Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryFlowWithoutBrowser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceRecoveryFlow>>;
    /**
     * This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url`.  If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Registration Flow for Browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationFlowForBrowsers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceRegistrationFlow>>;
    /**
     * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Registration Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationFlowWithoutBrowser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceRegistrationFlow>>;
    /**
     * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid user session was set, the browser will be redirected to the login endpoint.  If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 403 forbidden error if no valid session was set.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for Browsers
     * @param {string} [cookie] The Session Cookie of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsFlowForBrowsers(cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceSettingsFlow>>;
    /**
     * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for APIs, Services, Apps, ...
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsFlowWithoutBrowser(xSessionToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceSettingsFlow>>;
    /**
     * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for Browser Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationFlowForBrowsers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceVerificationFlow>>;
    /**
     * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationFlowWithoutBrowser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceVerificationFlow>>;
    /**
     * :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 302 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded; a HTTP 302 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Submit a Login Flow
     * @param {string} flow The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceLoginFlowBody} [submitSelfServiceLoginFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLoginFlow(flow: string, submitSelfServiceLoginFlowBody?: SubmitSelfServiceLoginFlowBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulSelfServiceLoginWithoutBrowser>>;
    /**
     * This endpoint logs out an identity in a self-service manner.  If the `Accept` HTTP header is not set to `application/json`, the browser will be redirected (HTTP 302 Found) to the `return_to` parameter of the initial request or fall back to `urls.default_return_to`.  If the `Accept` HTTP header is set to `application/json`, a 204 No Content response will be sent on successful logout instead.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
     * @summary Complete Self-Service Logout
     * @param {string} [token] A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call &#x60;/self-service/logout/urls&#x60; to generate a URL for this endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLogoutFlow(token?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when the Ory Session Token has been revoked already before.  If the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
     * @summary Perform Logout for APIs, Services, Apps, ...
     * @param {SubmitSelfServiceLogoutFlowWithoutBrowserBody} submitSelfServiceLogoutFlowWithoutBrowserBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLogoutFlowWithoutBrowser(submitSelfServiceLogoutFlowWithoutBrowserBody: SubmitSelfServiceLogoutFlowWithoutBrowserBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this endpoint to complete a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid. and a HTTP 302 Found redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 302 Found redirect to the Recovery UI URL with the Recovery Flow ID appended. `sent_email` is the success state after `choose_method` for the `link` method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\") does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Complete Recovery Flow
     * @param {string} flow The Recovery Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {string} [token] Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {SubmitSelfServiceRecoveryFlowBody} [submitSelfServiceRecoveryFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceRecoveryFlow(flow: string, token?: string, submitSelfServiceRecoveryFlowBody?: SubmitSelfServiceRecoveryFlowBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceRecoveryFlow>>;
    /**
     * Use this endpoint to complete a registration flow by sending an identity\'s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the `session` and `session_token` will also be included; HTTP 302 redirect to a fresh registration flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 302 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded; a HTTP 302 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Submit a Registration Flow
     * @param {string} flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceRegistrationFlowBody} [submitSelfServiceRegistrationFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceRegistrationFlow(flow: string, submitSelfServiceRegistrationFlowBody?: SubmitSelfServiceRegistrationFlowBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulSelfServiceRegistrationWithoutBrowser>>;
    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached. Implies that the user needs to re-authenticate.  Browser flows without HTTP Header `Accept` or with `Accept: text/_*` respond with a HTTP 302 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 302 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 302 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached.  Browser flows with HTTP Header `Accept: application/json` respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 403 when the page is accessed without a session cookie. HTTP 400 on form validation errors.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow
     * @param {string} flow The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {SubmitSelfServiceSettingsFlowBody} [submitSelfServiceSettingsFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceSettingsFlow(flow: string, xSessionToken?: string, submitSelfServiceSettingsFlowBody?: SubmitSelfServiceSettingsFlowBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulSelfServiceSettingsWithoutBrowser>>;
    /**
     * Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 302 Found redirect to the Verification UI URL with the Verification Flow ID appended. `sent_email` is the success state after `choose_method` when using the `link` method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\") does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Complete Verification Flow
     * @param {string} flow The Verification Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {string} [token] Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {SubmitSelfServiceVerificationFlowBody} [submitSelfServiceVerificationFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceVerificationFlow(flow: string, token?: string, submitSelfServiceVerificationFlowBody?: SubmitSelfServiceVerificationFlowBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceVerificationFlow>>;
    /**
     * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. Additionally when the request it successful it adds the user ID to the \'X-Kratos-Authenticated-Identity-Id\' header in the response.  If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:  ```js pseudo-code example router.get(\'/protected-endpoint\', async function (req, res) { const session = await client.toSession(undefined, req.header(\'cookie\'))  console.log(session) }) ```  When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:  ```js pseudo-code example ... const session = await client.toSession(\"the-session-token\")  console.log(session) ```  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the `X-Session-Token` header!  This endpoint authenticates users by checking  if the `Cookie` HTTP header was set containing an Ory Kratos Session Cookie; if the `Authorization: bearer <ory-session-token>` HTTP header was set with a valid Ory Kratos Session Token; if the `X-Session-Token` HTTP header was set with a valid Ory Kratos Session Token.  If none of these headers are set or the cooke or token are invalid, the endpoint returns a HTTP 401 status code.
     * @summary Check Who the Current HTTP Session Belongs To
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    toSession(xSessionToken?: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>>;
};
/**
 * V0alpha1Api - factory interface
 * @export
 */
export declare const V0alpha1ApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint creates an identity. It is NOT possible to set an identity\'s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Create an Identity
     * @param {AdminCreateIdentityBody} [adminCreateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateIdentity(adminCreateIdentityBody?: AdminCreateIdentityBody, options?: any): AxiosPromise<Identity>;
    /**
     * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {AdminCreateSelfServiceRecoveryLinkBody} [adminCreateSelfServiceRecoveryLinkBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateSelfServiceRecoveryLink(adminCreateSelfServiceRecoveryLinkBody?: AdminCreateSelfServiceRecoveryLinkBody, options?: any): AxiosPromise<SelfServiceRecoveryLink>;
    /**
     * Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Delete an Identity
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteIdentity(id: string, options?: any): AxiosPromise<void>;
    /**
     * Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Get an Identity
     * @param {string} id ID must be set to the ID of identity you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetIdentity(id: string, options?: any): AxiosPromise<Identity>;
    /**
     * Lists all identities. Does not support search at the moment.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary List Identities
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListIdentities(perPage?: number, page?: number, options?: any): AxiosPromise<Array<Identity>>;
    /**
     * This endpoint updates an identity. It is NOT possible to set an identity\'s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  The full identity payload (except credentials) is expected. This endpoint does not support patching.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Update an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {AdminUpdateIdentityBody} [adminUpdateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateIdentity(id: string, adminUpdateIdentityBody?: AdminUpdateIdentityBody, options?: any): AxiosPromise<Identity>;
    /**
     * This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.  When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
     * @summary Create a Logout URL for Browsers
     * @param {string} [cookie] HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSelfServiceLogoutFlowUrlForBrowsers(cookie?: string, options?: any): AxiosPromise<SelfServiceLogoutUrl>;
    /**
     * Get a JSON Schema
     * @param {string} id ID must be set to the ID of schema you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJsonSchema(id: string, options?: any): AxiosPromise<object>;
    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?id=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get Self-Service Errors
     * @param {string} id Error is the error\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceError(id: string, options?: any): AxiosPromise<SelfServiceError>;
    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/login\', async function (req, res) { const flow = await client.getSelfServiceLoginFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'login\', flow) }) ```  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Login Flow
     * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceLoginFlow(id: string, cookie?: string, options?: any): AxiosPromise<SelfServiceLoginFlow>;
    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceRecoveryFlow(req.header(\'Cookie\'), req.query[\'flow\'])  res.render(\'recovery\', flow) }) ```  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Get Recovery Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRecoveryFlow(id: string, cookie?: string, options?: any): AxiosPromise<SelfServiceRecoveryFlow>;
    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/registration\', async function (req, res) { const flow = await client.getSelfServiceRegistrationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'registration\', flow) }) ```  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Registration Flow
     * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRegistrationFlow(id: string, cookie?: string, options?: any): AxiosPromise<SelfServiceRegistrationFlow>;
    /**
     * When accessing this endpoint through Ory Kratos\' Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using Ory Kratos\' Admin API.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {string} [xSessionToken] The Session Token  When using the SDK in an app without a browser, please include the session token here.
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here. You only need to do this for browser- based flows.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceSettingsFlow(id: string, xSessionToken?: string, cookie?: string, options?: any): AxiosPromise<SelfServiceSettingsFlow>;
    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceVerificationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'verification\', flow) })  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceVerificationFlow(id: string, cookie?: string, options?: any): AxiosPromise<SelfServiceVerificationFlow>;
    /**
     * This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  If this endpoint is called via an AJAX request, the response contains the login flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Login Flow for Browsers
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginFlowForBrowsers(refresh?: boolean, options?: any): AxiosPromise<SelfServiceLoginFlow>;
    /**
     * This endpoint initiates a login flow for API clients that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Login Flow for APIs, Services, Apps, ...
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginFlowWithoutBrowser(refresh?: boolean, options?: any): AxiosPromise<SelfServiceLoginFlow>;
    /**
     * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists, the browser is returned to the configured return URL.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects or a 400 bad request error if the user is already authenticated.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Initialize Recovery Flow for Browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryFlowForBrowsers(options?: any): AxiosPromise<SelfServiceRecoveryFlow>;
    /**
     * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).   More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Initialize Recovery Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryFlowWithoutBrowser(options?: any): AxiosPromise<SelfServiceRecoveryFlow>;
    /**
     * This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url`.  If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Registration Flow for Browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationFlowForBrowsers(options?: any): AxiosPromise<SelfServiceRegistrationFlow>;
    /**
     * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Registration Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationFlowWithoutBrowser(options?: any): AxiosPromise<SelfServiceRegistrationFlow>;
    /**
     * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid user session was set, the browser will be redirected to the login endpoint.  If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 403 forbidden error if no valid session was set.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for Browsers
     * @param {string} [cookie] The Session Cookie of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsFlowForBrowsers(cookie?: string, options?: any): AxiosPromise<SelfServiceSettingsFlow>;
    /**
     * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for APIs, Services, Apps, ...
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsFlowWithoutBrowser(xSessionToken?: string, options?: any): AxiosPromise<SelfServiceSettingsFlow>;
    /**
     * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for Browser Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationFlowForBrowsers(options?: any): AxiosPromise<SelfServiceVerificationFlow>;
    /**
     * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationFlowWithoutBrowser(options?: any): AxiosPromise<SelfServiceVerificationFlow>;
    /**
     * :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 302 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded; a HTTP 302 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Submit a Login Flow
     * @param {string} flow The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceLoginFlowBody} [submitSelfServiceLoginFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLoginFlow(flow: string, submitSelfServiceLoginFlowBody?: SubmitSelfServiceLoginFlowBody, options?: any): AxiosPromise<SuccessfulSelfServiceLoginWithoutBrowser>;
    /**
     * This endpoint logs out an identity in a self-service manner.  If the `Accept` HTTP header is not set to `application/json`, the browser will be redirected (HTTP 302 Found) to the `return_to` parameter of the initial request or fall back to `urls.default_return_to`.  If the `Accept` HTTP header is set to `application/json`, a 204 No Content response will be sent on successful logout instead.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
     * @summary Complete Self-Service Logout
     * @param {string} [token] A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call &#x60;/self-service/logout/urls&#x60; to generate a URL for this endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLogoutFlow(token?: string, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when the Ory Session Token has been revoked already before.  If the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
     * @summary Perform Logout for APIs, Services, Apps, ...
     * @param {SubmitSelfServiceLogoutFlowWithoutBrowserBody} submitSelfServiceLogoutFlowWithoutBrowserBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLogoutFlowWithoutBrowser(submitSelfServiceLogoutFlowWithoutBrowserBody: SubmitSelfServiceLogoutFlowWithoutBrowserBody, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to complete a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid. and a HTTP 302 Found redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 302 Found redirect to the Recovery UI URL with the Recovery Flow ID appended. `sent_email` is the success state after `choose_method` for the `link` method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\") does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Complete Recovery Flow
     * @param {string} flow The Recovery Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {string} [token] Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {SubmitSelfServiceRecoveryFlowBody} [submitSelfServiceRecoveryFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceRecoveryFlow(flow: string, token?: string, submitSelfServiceRecoveryFlowBody?: SubmitSelfServiceRecoveryFlowBody, options?: any): AxiosPromise<SelfServiceRecoveryFlow>;
    /**
     * Use this endpoint to complete a registration flow by sending an identity\'s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the `session` and `session_token` will also be included; HTTP 302 redirect to a fresh registration flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 302 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded; a HTTP 302 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Submit a Registration Flow
     * @param {string} flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceRegistrationFlowBody} [submitSelfServiceRegistrationFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceRegistrationFlow(flow: string, submitSelfServiceRegistrationFlowBody?: SubmitSelfServiceRegistrationFlowBody, options?: any): AxiosPromise<SuccessfulSelfServiceRegistrationWithoutBrowser>;
    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached. Implies that the user needs to re-authenticate.  Browser flows without HTTP Header `Accept` or with `Accept: text/_*` respond with a HTTP 302 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 302 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 302 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached.  Browser flows with HTTP Header `Accept: application/json` respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 403 when the page is accessed without a session cookie. HTTP 400 on form validation errors.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow
     * @param {string} flow The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {SubmitSelfServiceSettingsFlowBody} [submitSelfServiceSettingsFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceSettingsFlow(flow: string, xSessionToken?: string, submitSelfServiceSettingsFlowBody?: SubmitSelfServiceSettingsFlowBody, options?: any): AxiosPromise<SuccessfulSelfServiceSettingsWithoutBrowser>;
    /**
     * Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 302 Found redirect to the Verification UI URL with the Verification Flow ID appended. `sent_email` is the success state after `choose_method` when using the `link` method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\") does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Complete Verification Flow
     * @param {string} flow The Verification Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {string} [token] Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {SubmitSelfServiceVerificationFlowBody} [submitSelfServiceVerificationFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceVerificationFlow(flow: string, token?: string, submitSelfServiceVerificationFlowBody?: SubmitSelfServiceVerificationFlowBody, options?: any): AxiosPromise<SelfServiceVerificationFlow>;
    /**
     * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. Additionally when the request it successful it adds the user ID to the \'X-Kratos-Authenticated-Identity-Id\' header in the response.  If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:  ```js pseudo-code example router.get(\'/protected-endpoint\', async function (req, res) { const session = await client.toSession(undefined, req.header(\'cookie\'))  console.log(session) }) ```  When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:  ```js pseudo-code example ... const session = await client.toSession(\"the-session-token\")  console.log(session) ```  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the `X-Session-Token` header!  This endpoint authenticates users by checking  if the `Cookie` HTTP header was set containing an Ory Kratos Session Cookie; if the `Authorization: bearer <ory-session-token>` HTTP header was set with a valid Ory Kratos Session Token; if the `X-Session-Token` HTTP header was set with a valid Ory Kratos Session Token.  If none of these headers are set or the cooke or token are invalid, the endpoint returns a HTTP 401 status code.
     * @summary Check Who the Current HTTP Session Belongs To
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    toSession(xSessionToken?: string, cookie?: string, options?: any): AxiosPromise<Session>;
};
/**
 * V0alpha1Api - object-oriented interface
 * @export
 * @class V0alpha1Api
 * @extends {BaseAPI}
 */
export declare class V0alpha1Api extends BaseAPI {
    /**
     * This endpoint creates an identity. It is NOT possible to set an identity\'s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Create an Identity
     * @param {AdminCreateIdentityBody} [adminCreateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    adminCreateIdentity(adminCreateIdentityBody?: AdminCreateIdentityBody, options?: any): Promise<import("axios").AxiosResponse<Identity>>;
    /**
     * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {AdminCreateSelfServiceRecoveryLinkBody} [adminCreateSelfServiceRecoveryLinkBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    adminCreateSelfServiceRecoveryLink(adminCreateSelfServiceRecoveryLinkBody?: AdminCreateSelfServiceRecoveryLinkBody, options?: any): Promise<import("axios").AxiosResponse<SelfServiceRecoveryLink>>;
    /**
     * Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Delete an Identity
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    adminDeleteIdentity(id: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Get an Identity
     * @param {string} id ID must be set to the ID of identity you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    adminGetIdentity(id: string, options?: any): Promise<import("axios").AxiosResponse<Identity>>;
    /**
     * Lists all identities. Does not support search at the moment.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary List Identities
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    adminListIdentities(perPage?: number, page?: number, options?: any): Promise<import("axios").AxiosResponse<Identity[]>>;
    /**
     * This endpoint updates an identity. It is NOT possible to set an identity\'s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  The full identity payload (except credentials) is expected. This endpoint does not support patching.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Update an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {AdminUpdateIdentityBody} [adminUpdateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    adminUpdateIdentity(id: string, adminUpdateIdentityBody?: AdminUpdateIdentityBody, options?: any): Promise<import("axios").AxiosResponse<Identity>>;
    /**
     * This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.  When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
     * @summary Create a Logout URL for Browsers
     * @param {string} [cookie] HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    createSelfServiceLogoutFlowUrlForBrowsers(cookie?: string, options?: any): Promise<import("axios").AxiosResponse<SelfServiceLogoutUrl>>;
    /**
     * Get a JSON Schema
     * @param {string} id ID must be set to the ID of schema you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    getJsonSchema(id: string, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?id=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get Self-Service Errors
     * @param {string} id Error is the error\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    getSelfServiceError(id: string, options?: any): Promise<import("axios").AxiosResponse<SelfServiceError>>;
    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/login\', async function (req, res) { const flow = await client.getSelfServiceLoginFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'login\', flow) }) ```  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Login Flow
     * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    getSelfServiceLoginFlow(id: string, cookie?: string, options?: any): Promise<import("axios").AxiosResponse<SelfServiceLoginFlow>>;
    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceRecoveryFlow(req.header(\'Cookie\'), req.query[\'flow\'])  res.render(\'recovery\', flow) }) ```  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Get Recovery Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    getSelfServiceRecoveryFlow(id: string, cookie?: string, options?: any): Promise<import("axios").AxiosResponse<SelfServiceRecoveryFlow>>;
    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/registration\', async function (req, res) { const flow = await client.getSelfServiceRegistrationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'registration\', flow) }) ```  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Get Registration Flow
     * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    getSelfServiceRegistrationFlow(id: string, cookie?: string, options?: any): Promise<import("axios").AxiosResponse<SelfServiceRegistrationFlow>>;
    /**
     * When accessing this endpoint through Ory Kratos\' Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using Ory Kratos\' Admin API.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {string} [xSessionToken] The Session Token  When using the SDK in an app without a browser, please include the session token here.
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here. You only need to do this for browser- based flows.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    getSelfServiceSettingsFlow(id: string, xSessionToken?: string, cookie?: string, options?: any): Promise<import("axios").AxiosResponse<SelfServiceSettingsFlow>>;
    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceVerificationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'verification\', flow) })  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    getSelfServiceVerificationFlow(id: string, cookie?: string, options?: any): Promise<import("axios").AxiosResponse<SelfServiceVerificationFlow>>;
    /**
     * This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  If this endpoint is called via an AJAX request, the response contains the login flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Login Flow for Browsers
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    initializeSelfServiceLoginFlowForBrowsers(refresh?: boolean, options?: any): Promise<import("axios").AxiosResponse<SelfServiceLoginFlow>>;
    /**
     * This endpoint initiates a login flow for API clients that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Login Flow for APIs, Services, Apps, ...
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    initializeSelfServiceLoginFlowWithoutBrowser(refresh?: boolean, options?: any): Promise<import("axios").AxiosResponse<SelfServiceLoginFlow>>;
    /**
     * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists, the browser is returned to the configured return URL.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects or a 400 bad request error if the user is already authenticated.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Initialize Recovery Flow for Browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    initializeSelfServiceRecoveryFlowForBrowsers(options?: any): Promise<import("axios").AxiosResponse<SelfServiceRecoveryFlow>>;
    /**
     * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).   More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Initialize Recovery Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    initializeSelfServiceRecoveryFlowWithoutBrowser(options?: any): Promise<import("axios").AxiosResponse<SelfServiceRecoveryFlow>>;
    /**
     * This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url`.  If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Registration Flow for Browsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    initializeSelfServiceRegistrationFlowForBrowsers(options?: any): Promise<import("axios").AxiosResponse<SelfServiceRegistrationFlow>>;
    /**
     * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Initialize Registration Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    initializeSelfServiceRegistrationFlowWithoutBrowser(options?: any): Promise<import("axios").AxiosResponse<SelfServiceRegistrationFlow>>;
    /**
     * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid user session was set, the browser will be redirected to the login endpoint.  If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 403 forbidden error if no valid session was set.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for Browsers
     * @param {string} [cookie] The Session Cookie of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    initializeSelfServiceSettingsFlowForBrowsers(cookie?: string, options?: any): Promise<import("axios").AxiosResponse<SelfServiceSettingsFlow>>;
    /**
     * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for APIs, Services, Apps, ...
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    initializeSelfServiceSettingsFlowWithoutBrowser(xSessionToken?: string, options?: any): Promise<import("axios").AxiosResponse<SelfServiceSettingsFlow>>;
    /**
     * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for Browser Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    initializeSelfServiceVerificationFlowForBrowsers(options?: any): Promise<import("axios").AxiosResponse<SelfServiceVerificationFlow>>;
    /**
     * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    initializeSelfServiceVerificationFlowWithoutBrowser(options?: any): Promise<import("axios").AxiosResponse<SelfServiceVerificationFlow>>;
    /**
     * :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 302 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded; a HTTP 302 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Submit a Login Flow
     * @param {string} flow The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceLoginFlowBody} [submitSelfServiceLoginFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    submitSelfServiceLoginFlow(flow: string, submitSelfServiceLoginFlowBody?: SubmitSelfServiceLoginFlowBody, options?: any): Promise<import("axios").AxiosResponse<SuccessfulSelfServiceLoginWithoutBrowser>>;
    /**
     * This endpoint logs out an identity in a self-service manner.  If the `Accept` HTTP header is not set to `application/json`, the browser will be redirected (HTTP 302 Found) to the `return_to` parameter of the initial request or fall back to `urls.default_return_to`.  If the `Accept` HTTP header is set to `application/json`, a 204 No Content response will be sent on successful logout instead.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
     * @summary Complete Self-Service Logout
     * @param {string} [token] A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call &#x60;/self-service/logout/urls&#x60; to generate a URL for this endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    submitSelfServiceLogoutFlow(token?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when the Ory Session Token has been revoked already before.  If the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
     * @summary Perform Logout for APIs, Services, Apps, ...
     * @param {SubmitSelfServiceLogoutFlowWithoutBrowserBody} submitSelfServiceLogoutFlowWithoutBrowserBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    submitSelfServiceLogoutFlowWithoutBrowser(submitSelfServiceLogoutFlowWithoutBrowserBody: SubmitSelfServiceLogoutFlowWithoutBrowserBody, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to complete a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid. and a HTTP 302 Found redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 302 Found redirect to the Recovery UI URL with the Recovery Flow ID appended. `sent_email` is the success state after `choose_method` for the `link` method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\") does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @summary Complete Recovery Flow
     * @param {string} flow The Recovery Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {string} [token] Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {SubmitSelfServiceRecoveryFlowBody} [submitSelfServiceRecoveryFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    submitSelfServiceRecoveryFlow(flow: string, token?: string, submitSelfServiceRecoveryFlowBody?: SubmitSelfServiceRecoveryFlowBody, options?: any): Promise<import("axios").AxiosResponse<SelfServiceRecoveryFlow>>;
    /**
     * Use this endpoint to complete a registration flow by sending an identity\'s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the `session` and `session_token` will also be included; HTTP 302 redirect to a fresh registration flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 302 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded; a HTTP 302 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @summary Submit a Registration Flow
     * @param {string} flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceRegistrationFlowBody} [submitSelfServiceRegistrationFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    submitSelfServiceRegistrationFlow(flow: string, submitSelfServiceRegistrationFlowBody?: SubmitSelfServiceRegistrationFlowBody, options?: any): Promise<import("axios").AxiosResponse<SuccessfulSelfServiceRegistrationWithoutBrowser>>;
    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached. Implies that the user needs to re-authenticate.  Browser flows without HTTP Header `Accept` or with `Accept: text/_*` respond with a HTTP 302 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 302 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 302 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached.  Browser flows with HTTP Header `Accept: application/json` respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 403 when the page is accessed without a session cookie. HTTP 400 on form validation errors.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow
     * @param {string} flow The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {SubmitSelfServiceSettingsFlowBody} [submitSelfServiceSettingsFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    submitSelfServiceSettingsFlow(flow: string, xSessionToken?: string, submitSelfServiceSettingsFlowBody?: SubmitSelfServiceSettingsFlowBody, options?: any): Promise<import("axios").AxiosResponse<SuccessfulSelfServiceSettingsWithoutBrowser>>;
    /**
     * Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 302 Found redirect to the Verification UI URL with the Verification Flow ID appended. `sent_email` is the success state after `choose_method` when using the `link` method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\") does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Complete Verification Flow
     * @param {string} flow The Verification Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {string} [token] Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {SubmitSelfServiceVerificationFlowBody} [submitSelfServiceVerificationFlowBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    submitSelfServiceVerificationFlow(flow: string, token?: string, submitSelfServiceVerificationFlowBody?: SubmitSelfServiceVerificationFlowBody, options?: any): Promise<import("axios").AxiosResponse<SelfServiceVerificationFlow>>;
    /**
     * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. Additionally when the request it successful it adds the user ID to the \'X-Kratos-Authenticated-Identity-Id\' header in the response.  If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:  ```js pseudo-code example router.get(\'/protected-endpoint\', async function (req, res) { const session = await client.toSession(undefined, req.header(\'cookie\'))  console.log(session) }) ```  When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:  ```js pseudo-code example ... const session = await client.toSession(\"the-session-token\")  console.log(session) ```  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the `X-Session-Token` header!  This endpoint authenticates users by checking  if the `Cookie` HTTP header was set containing an Ory Kratos Session Cookie; if the `Authorization: bearer <ory-session-token>` HTTP header was set with a valid Ory Kratos Session Token; if the `X-Session-Token` HTTP header was set with a valid Ory Kratos Session Token.  If none of these headers are set or the cooke or token are invalid, the endpoint returns a HTTP 401 status code.
     * @summary Check Who the Current HTTP Session Belongs To
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha1Api
     */
    toSession(xSessionToken?: string, cookie?: string, options?: any): Promise<import("axios").AxiosResponse<Session>>;
}
